---
# Firewall rules full access to everything!
profile::firewall::rules::custom_rules:
  '451 haproxy http':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:       '0.0.0.0/0'
  '455 haproxy status':
    proto:        'tcp'
    dport:        ['9000']
    source:       '0.0.0.0/0'

# corosync
corosync::unicast_addresses:
  - "%{hiera('netcfg_public_netpart')}.18"
  - "%{hiera('netcfg_public_netpart')}.19"

corosync::quorum_members:
  - "%{::location}-ha-grid-01.%{hiera('domain_mgmt')}"
  - "%{::location}-ha-grid-02.%{hiera('domain_mgmt')}"

corosync_cluster_node1:   "%{::location}-ha-grid-01.%{hiera('domain_mgmt')}"
corosync_cluster_node2:   "%{::location}-ha-grid-02.%{hiera('domain_mgmt')}"

profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  uib_grid_domains:
    ensure: present
    mappings:
      - 's3.grid.uib.no':                         'uib-https-grid'

profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  'uib-https-grid':
    listening_service:  'uib-https-grid'
    ports:              18082
    server_names:       ['uib-grid-01.grid.uib.no', 'uib-grid-02.grid.uib.no', 'uib-grid-03.grid.uib.no', 'uib-grid-04.grid.uib.no']
    ipaddresses:        ['129.177.3.11', '129.177.3.12', '129.177.3.13', '129.177.3.14']
    options:
      - 'check'
      - 'check-ssl'
      - 'verify none'

profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  uib-https-grid:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
      - option:
        - 'httpchk OPTIONS / HTTP/1.1'

profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  uib-https-grid:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:443": []
      "%{hiera('corosync_cluster_vip2')}:443": []
    options:
      - maxconn:        '5000' # max grid https connections
      - timeout:
        - 'connect 5s'
        - 'client 50s'
        - 'server 50s'
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:    'uib-https-grid'

# Corosync VIP and HAproxy
profile::highavailability::corosync::primitives:
  'gridip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'gridip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':          { 'interval': '5s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }

profile::highavailability::corosync::locations:
  'gridip_location1':
    primitive:  'gridip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'gridip_location2':
    primitive:  'gridip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'

profile::highavailability::corosync::colocations:
  'gridip1_haproxy':
    primitives:   ['clone_haproxy', 'gridip1']
  'gridip2_haproxy':
    primitives:   ['clone_haproxy', 'gridip2']
