---
named_interfaces::config:
  mgmt:
    - bond0.940
  public:
    - bond0
  core:
    - bond0.940
  uib:
    - bond0.942

# network
netcfg_core_netpart:  '192.168.20'
netcfg_uib_netpart:   '192.168.22'

# ssh access
profile::firewall::pre::ssh_settings:
  source:
    - "%{::network_mgmt1}/%{::netmask_mgmt1}"
    - "%{hiera('netcfg_core_netpart')}.9" # t1-iam-login
    - "%{hiera('netcfg_core_netpart')}.10" # t2-iam-login

accounts::ssh_keys:
  'iam':
    type:    'ssh-ed25519'
    public:  'AAAAC3NzaC1lZDI1NTE5AAAAIJYP2tD0gY0ikjB3NBJkPPj3MUSp9GpwuRfnDGSEKYcN'

accounts::users:
  'iam':
    comment: 'iam_uib_ita'
    groups:  [ 'users', 'wheel' ]

accounts::accounts:
  'iam':
    ensure: present

corosync::cluster_name:   '%{::location}-ha-iam'
corosync::unicast_addresses:
  - "%{hiera('netcfg_public3_netpart')}.176"
  - "%{hiera('netcfg_public3_netpart')}.177"

corosync::quorum_members:
  - "%{hiera('netcfg_public3_netpart')}.176"
  - "%{hiera('netcfg_public3_netpart')}.177"

corosync_cluster_node1:   "%{::location}-ha-iamtest-01.%{hiera('domain_mgmt')}"
corosync_cluster_node2:   "%{::location}-ha-iamtest-02.%{hiera('domain_mgmt')}"

corosync_cluster_vip1:    "%{hiera('netcfg_public3_netpart')}.178"  # iamproxy.ha
corosync_cluster_vip2:    "%{hiera('netcfg_public3_netpart')}.179"  # iamproxy.ha
corosync_cluster_vip3:    "%{hiera('netcfg_core_netpart')}.200"      # core internal
corosync_cluster_vip4:    "%{hiera('netcfg_core_netpart')}.201"      # uibldap

ssl_cert_core:          'iam.uninett.no.pem'
ssl_cert_connect:       'connect.iam.uninett.no.pem'
ssl_cert_uib:           'tilgang.uib.no.pem'

# Firewall
profile::firewall::rules::custom_rules:
  '451 haproxy http for public vip1':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:
      - '158.38.62.0/23' # uninett
      - '158.38.178.0/25' #uninett
      - '129.177.0.0/16' # uib
    destination:  "%{hiera('corosync_cluster_vip1')}"
  '452 haproxy http for public vip2':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:
      - '158.38.62.0/23' # uninett
      - '158.38.178.0/25' #uninett
      - '129.177.0.0/16' # uib
    destination:  "%{hiera('corosync_cluster_vip2')}"
  '453 haproxy http for internal vip3':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:
      - '192.168.21.0/24' #core
    destination:  "%{hiera('corosync_cluster_vip3')}"
  '454 haproxy http for uib ldap vip4':
    proto:        'tcp'
    dport:        [ '636' ]
    source:
      - '192.168.21.0/24' #core
    destination:  "%{hiera('corosync_cluster_vip4')}"
  '455 haproxy status public':
    proto:        'tcp'
    dport:        ['9000']
    source:
      - '129.177.6.133/32' # bgo-login
    destination:  '%{::ipaddress_public1}'
  '456 haproxy status core':
    proto:        'tcp'
    dport:        ['9000']
    source:       '192.168.21.0/24' #core
    destination:  '%{::ipaddress_core1}'

profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  'ssl-https-connect':
    listening_service:  'ssl-https-connect'
    ports:              443
    server_names:       ['p1-iam-connect-01', 'p1-iam-connect-01']
    ipaddresses:        ['192.168.20.119', '192.168.20.120']
    options:            'verify none inter 120 check ssl'
  'ssl-https-core':
    listening_service:  'ssl-https-core'
    ports:              443
    server_names:       ['p1-iam-coreportal-01', 'p2-iam-coreportal-01']
    ipaddresses:        ['192.168.20.109', '192.168.20.110']
    options:            'verify none inter 120 check ssl'
  'ssl-https-uib':
    listening_service:  'ssl-https-uib'
    ports:              443
    server_names:       ['p1-iam-uibportal-01', 'p2-iam-uibportal-01']
    ipaddresses:        ['192.168.22.109', '192.168.22.110']
    options:            'verify none inter 120 check ssl'
  'uib-ldap':
    listening_service:  'uib-ldap'
    ports:              '636'
    server_names:       ['p1-iam-uibldap-01', 'p2-iam-uibldap-01']
    ipaddresses:        ['192.168.22.139','192.168.22.140']
    options:
      - 'check'

#
# COPY OF TEST IAM SETUP
#

profile::highavailability::loadbalancing::haproxy::access_list: {}

haproxy::global_options:
  log:          '127.0.0.1 local6 info alert'
  maxconn:      '20000' # per core
  crt-base:     '/etc/pki/tls/certs'
  tune.ssl.default-dh-param:  2048
  ssl-default-bind-options:   'no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11'
  ssl-default-bind-ciphers:   'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS'
  ssl-default-server-options: 'no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11'
  ssl-default-server-ciphers: 'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS'

haproxy::defaults_options:
  log:          'global'
  stats:        []
  option:       ['dontlognull', 'httplog', 'http-server-close', 'redispatch']
  maxconn:      '2000' # per frontend
  timeout:
    - 'connect 10s'
    - 'http-keep-alive 10s'
    - 'check 10s'
    - 'http-request 10s'
    - 'client 30s'
    - 'server 60s'
    - 'queue 30s'
    - 'tunnel 3m'

profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  ssl_https_domains:
    ensure: present
    mappings:
      - 'connect.iam-test.uninett.no':                  'ssl-https-connect'
      - 'iam-test.uninett.no':                          'ssl-https-core'
      - 'tilgang.test.uib.no':                          'ssl-https-uib'
  ssl_http_domains:
    ensure: present
    mappings:
      - 'connect.iam-test.uninett.no':                  'ssl-http-connect'
      - 'iam-test.uninett.no':                          'ssl-http-core'
      - 'tilgang.test.uib.no':                          'ssl-http-uib'

profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  ssl-https-connect:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
      - http-check: 'expect status 200'
  ssl-https-core:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
      - http-check: 'expect status 200'
      # Session stick table and based on source IP
      - stick-table: 'type ip size 1m expire 5m'
      - stick:
        - 'on src'
        - 'match src'
  ssl-https-uib:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
      - http-check: 'expect status 200'
      # Session stick table and based on source IP
      - stick-table: 'type ip size 1m expire 5m'
      - stick:
        - 'on src'
        - 'match src'
  ssl-http-connect:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  ssl-http-core:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  ssl-http-uib:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  uib-ldap:
    mode:             'tcp'
    options:
      - balance:      'leastconn'

profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  ssl-http: #for redirect
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:80": []
      "%{hiera('corosync_cluster_vip2')}:80": []
      "%{hiera('corosync_cluster_vip3')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/ssl_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  ssl-https:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_core')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_connect')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_uib')}"
      "%{hiera('corosync_cluster_vip2')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_core')}"
        # - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_connect')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_uib')}"
      "%{hiera('corosync_cluster_vip3')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_core')}"
        # - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_connect')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_uib')}"
    options:
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/ssl_https_domains.map)]'
      # Prevents X-Forwarded-For spoofing
      - http-request:
        - 'del-header ^X-Forwarded-For:.*'
        - 'del-header ^X-SSL-Client-Verify:.*'
        - 'del-header ^X-SSL-Client-DN:.*'
  uib-ldap:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip4')}:636": []
    options:
      - option:         'tcplog'
      - use_backend:    'uib-ldap'

profile::highavailability::loadbalancing::haproxy::haproxy_listens:
  monitor:
    mode: 'http'
    options:
      option: ['httplog']
      stats:
        - 'enable'
        - 'hide-version'
        - 'show-node'
        - 'realm Monitor\ Stats'
        - 'uri /'
    bind:
      '%{::ipaddress_core1}:9000':              []
      '%{::ipaddress_public1}:9000':            []

# Corosync VIP and HAproxy
profile::highavailability::corosync::primitives:
  'iamip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'iamip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'iamcore':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip3')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'uibldap':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip4')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':          { 'interval': '5s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }

profile::highavailability::corosync::locations:
  'iamip_location1':
    primitive:  'iamip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'iamip_location2':
    primitive:  'iamip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
  'iamcore_location':
    primitive:  'iamcore'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'uibldap_location':
    primitive:  'uibldap'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'

profile::highavailability::corosync::colocations:
  'iamip1_haproxy':
    primitives:   ['clone_haproxy', 'iamip1']
  'iamip2_haproxy':
    primitives:   ['clone_haproxy', 'iamip2']
  'iamcore_haproxy':
    primitives:   ['clone_haproxy', 'iamcore']
  'uibldap_haproxy':
    primitives:   ['clone_haproxy', 'uibldap']
